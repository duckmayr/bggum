// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// init_thetas
Rcpp::NumericVector init_thetas(int n, double mean, double sd);
RcppExport SEXP _bggum_init_thetas(SEXP nSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(init_thetas(n, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// init_alphas
Rcpp::NumericVector init_alphas(int m, double shape1, double shape2, double a, double b);
RcppExport SEXP _bggum_init_alphas(SEXP mSEXP, SEXP shape1SEXP, SEXP shape2SEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type shape1(shape1SEXP);
    Rcpp::traits::input_parameter< double >::type shape2(shape2SEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(init_alphas(m, shape1, shape2, a, b));
    return rcpp_result_gen;
END_RCPP
}
// init_deltas
Rcpp::NumericVector init_deltas(int m, double shape1, double shape2, double a, double b);
RcppExport SEXP _bggum_init_deltas(SEXP mSEXP, SEXP shape1SEXP, SEXP shape2SEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type shape1(shape1SEXP);
    Rcpp::traits::input_parameter< double >::type shape2(shape2SEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(init_deltas(m, shape1, shape2, a, b));
    return rcpp_result_gen;
END_RCPP
}
// init_taus
Rcpp::List init_taus(int m, double shape1, double shape2, double a, double b, Rcpp::IntegerVector K);
RcppExport SEXP _bggum_init_taus(SEXP mSEXP, SEXP shape1SEXP, SEXP shape2SEXP, SEXP aSEXP, SEXP bSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type shape1(shape1SEXP);
    Rcpp::traits::input_parameter< double >::type shape2(shape2SEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(init_taus(m, shape1, shape2, a, b, K));
    return rcpp_result_gen;
END_RCPP
}
// ggumMC3
Rcpp::NumericMatrix ggumMC3(Rcpp::IntegerMatrix data_, Rcpp::NumericMatrix theta_, Rcpp::NumericMatrix alpha_, Rcpp::NumericMatrix delta_, Rcpp::List tau_, Rcpp::IntegerVector K_, Rcpp::List SDs, Rcpp::NumericVector temps_, Rcpp::NumericVector alpha_parameters_, Rcpp::NumericVector delta_parameters_, Rcpp::NumericVector tau_parameters_, int sample_iterations, int burn_iterations, int state_swap_interval, int flip_interval);
RcppExport SEXP _bggum_ggumMC3(SEXP data_SEXP, SEXP theta_SEXP, SEXP alpha_SEXP, SEXP delta_SEXP, SEXP tau_SEXP, SEXP K_SEXP, SEXP SDsSEXP, SEXP temps_SEXP, SEXP alpha_parameters_SEXP, SEXP delta_parameters_SEXP, SEXP tau_parameters_SEXP, SEXP sample_iterationsSEXP, SEXP burn_iterationsSEXP, SEXP state_swap_intervalSEXP, SEXP flip_intervalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type theta_(theta_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type alpha_(alpha_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type delta_(delta_SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tau_(tau_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type K_(K_SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type SDs(SDsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type temps_(temps_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha_parameters_(alpha_parameters_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type delta_parameters_(delta_parameters_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tau_parameters_(tau_parameters_SEXP);
    Rcpp::traits::input_parameter< int >::type sample_iterations(sample_iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type burn_iterations(burn_iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type state_swap_interval(state_swap_intervalSEXP);
    Rcpp::traits::input_parameter< int >::type flip_interval(flip_intervalSEXP);
    rcpp_result_gen = Rcpp::wrap(ggumMC3(data_, theta_, alpha_, delta_, tau_, K_, SDs, temps_, alpha_parameters_, delta_parameters_, tau_parameters_, sample_iterations, burn_iterations, state_swap_interval, flip_interval));
    return rcpp_result_gen;
END_RCPP
}
// ggumMCMC
Rcpp::NumericMatrix ggumMCMC(Rcpp::IntegerMatrix data_, Rcpp::NumericMatrix theta_, Rcpp::NumericMatrix alpha_, Rcpp::NumericMatrix delta_, Rcpp::List tau_, Rcpp::IntegerVector K_, Rcpp::List SDs, Rcpp::NumericVector temps_, Rcpp::NumericVector alpha_parameters_, Rcpp::NumericVector delta_parameters_, Rcpp::NumericVector tau_parameters_, int sample_iterations, int burn_iterations, int flip_interval);
RcppExport SEXP _bggum_ggumMCMC(SEXP data_SEXP, SEXP theta_SEXP, SEXP alpha_SEXP, SEXP delta_SEXP, SEXP tau_SEXP, SEXP K_SEXP, SEXP SDsSEXP, SEXP temps_SEXP, SEXP alpha_parameters_SEXP, SEXP delta_parameters_SEXP, SEXP tau_parameters_SEXP, SEXP sample_iterationsSEXP, SEXP burn_iterationsSEXP, SEXP flip_intervalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type theta_(theta_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type alpha_(alpha_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type delta_(delta_SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tau_(tau_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type K_(K_SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type SDs(SDsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type temps_(temps_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha_parameters_(alpha_parameters_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type delta_parameters_(delta_parameters_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tau_parameters_(tau_parameters_SEXP);
    Rcpp::traits::input_parameter< int >::type sample_iterations(sample_iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type burn_iterations(burn_iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type flip_interval(flip_intervalSEXP);
    rcpp_result_gen = Rcpp::wrap(ggumMCMC(data_, theta_, alpha_, delta_, tau_, K_, SDs, temps_, alpha_parameters_, delta_parameters_, tau_parameters_, sample_iterations, burn_iterations, flip_interval));
    return rcpp_result_gen;
END_RCPP
}
// prob
double prob(const int choice, const double th, const double a, const double d, const NumericVector& t);
RcppExport SEXP _bggum_prob(SEXP choiceSEXP, SEXP thSEXP, SEXP aSEXP, SEXP dSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type choice(choiceSEXP);
    Rcpp::traits::input_parameter< const double >::type th(thSEXP);
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double >::type d(dSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(prob(choice, th, a, d, t));
    return rcpp_result_gen;
END_RCPP
}
// probCol
NumericVector probCol(const IntegerVector& choices, const NumericVector& thetas, const double a, const double d, const NumericVector& t);
RcppExport SEXP _bggum_probCol(SEXP choicesSEXP, SEXP thetasSEXP, SEXP aSEXP, SEXP dSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type choices(choicesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double >::type d(dSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(probCol(choices, thetas, a, d, t));
    return rcpp_result_gen;
END_RCPP
}
// probRow
NumericVector probRow(const IntegerVector& choices, const double th, const NumericVector& a, const NumericVector& d, const List& t);
RcppExport SEXP _bggum_probRow(SEXP choicesSEXP, SEXP thSEXP, SEXP aSEXP, SEXP dSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type choices(choicesSEXP);
    Rcpp::traits::input_parameter< const double >::type th(thSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const List& >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(probRow(choices, th, a, d, t));
    return rcpp_result_gen;
END_RCPP
}
// ggum_simulation
IntegerMatrix ggum_simulation(const int n, const int m, const IntegerVector& K, const NumericVector& theta, const NumericVector& alpha, const NumericVector& delta, const List& tau);
RcppExport SEXP _bggum_ggum_simulation(SEXP nSEXP, SEXP mSEXP, SEXP KSEXP, SEXP thetaSEXP, SEXP alphaSEXP, SEXP deltaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const List& >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(ggum_simulation(n, m, K, theta, alpha, delta, tau));
    return rcpp_result_gen;
END_RCPP
}
// summarize_matrix
NumericMatrix summarize_matrix(NumericMatrix x);
RcppExport SEXP _bggum_summarize_matrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(summarize_matrix(x));
    return rcpp_result_gen;
END_RCPP
}
// tune_proposals
Rcpp::List tune_proposals(Rcpp::IntegerMatrix data_, Rcpp::NumericMatrix theta_, Rcpp::NumericMatrix alpha_, Rcpp::NumericMatrix delta_, Rcpp::List tau_, Rcpp::IntegerVector K_, Rcpp::NumericVector alpha_parameters_, Rcpp::NumericVector delta_parameters_, Rcpp::NumericVector tau_parameters_, Rcpp::NumericVector temps_, int tune_iterations);
RcppExport SEXP _bggum_tune_proposals(SEXP data_SEXP, SEXP theta_SEXP, SEXP alpha_SEXP, SEXP delta_SEXP, SEXP tau_SEXP, SEXP K_SEXP, SEXP alpha_parameters_SEXP, SEXP delta_parameters_SEXP, SEXP tau_parameters_SEXP, SEXP temps_SEXP, SEXP tune_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type theta_(theta_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type alpha_(alpha_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type delta_(delta_SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tau_(tau_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type K_(K_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha_parameters_(alpha_parameters_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type delta_parameters_(delta_parameters_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tau_parameters_(tau_parameters_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type temps_(temps_SEXP);
    Rcpp::traits::input_parameter< int >::type tune_iterations(tune_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(tune_proposals(data_, theta_, alpha_, delta_, tau_, K_, alpha_parameters_, delta_parameters_, tau_parameters_, temps_, tune_iterations));
    return rcpp_result_gen;
END_RCPP
}
// tune_temps
Rcpp::NumericVector tune_temps(Rcpp::IntegerMatrix data_, Rcpp::NumericMatrix theta_, Rcpp::NumericMatrix alpha_, Rcpp::NumericMatrix delta_, Rcpp::List tau_, Rcpp::IntegerVector K_, Rcpp::List SDs, Rcpp::NumericVector alpha_parameters_, Rcpp::NumericVector delta_parameters_, Rcpp::NumericVector tau_parameters_, int n_temps, int iterations, int n_draws);
RcppExport SEXP _bggum_tune_temps(SEXP data_SEXP, SEXP theta_SEXP, SEXP alpha_SEXP, SEXP delta_SEXP, SEXP tau_SEXP, SEXP K_SEXP, SEXP SDsSEXP, SEXP alpha_parameters_SEXP, SEXP delta_parameters_SEXP, SEXP tau_parameters_SEXP, SEXP n_tempsSEXP, SEXP iterationsSEXP, SEXP n_drawsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type theta_(theta_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type alpha_(alpha_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type delta_(delta_SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tau_(tau_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type K_(K_SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type SDs(SDsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha_parameters_(alpha_parameters_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type delta_parameters_(delta_parameters_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tau_parameters_(tau_parameters_SEXP);
    Rcpp::traits::input_parameter< int >::type n_temps(n_tempsSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type n_draws(n_drawsSEXP);
    rcpp_result_gen = Rcpp::wrap(tune_temps(data_, theta_, alpha_, delta_, tau_, K_, SDs, alpha_parameters_, delta_parameters_, tau_parameters_, n_temps, iterations, n_draws));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bggum_init_thetas", (DL_FUNC) &_bggum_init_thetas, 3},
    {"_bggum_init_alphas", (DL_FUNC) &_bggum_init_alphas, 5},
    {"_bggum_init_deltas", (DL_FUNC) &_bggum_init_deltas, 5},
    {"_bggum_init_taus", (DL_FUNC) &_bggum_init_taus, 6},
    {"_bggum_ggumMC3", (DL_FUNC) &_bggum_ggumMC3, 15},
    {"_bggum_ggumMCMC", (DL_FUNC) &_bggum_ggumMCMC, 14},
    {"_bggum_prob", (DL_FUNC) &_bggum_prob, 5},
    {"_bggum_probCol", (DL_FUNC) &_bggum_probCol, 5},
    {"_bggum_probRow", (DL_FUNC) &_bggum_probRow, 5},
    {"_bggum_ggum_simulation", (DL_FUNC) &_bggum_ggum_simulation, 7},
    {"_bggum_summarize_matrix", (DL_FUNC) &_bggum_summarize_matrix, 1},
    {"_bggum_tune_proposals", (DL_FUNC) &_bggum_tune_proposals, 11},
    {"_bggum_tune_temps", (DL_FUNC) &_bggum_tune_temps, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_bggum(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
